#ifndef STOCK_H
#define STOCK_H

#include "TObject.h"
#include "TRandom.h"
#include "TMath.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <string>


class stock{

 public:
  // constructor
 stock(double bet=0, double alpha=0,double betaSigma=0):
  m_bet(bet),
    m_alpha(alpha),
    m_betaSigma(betaSigma)
    
    {
      m_beta = new TRandom();
      m_integral+=m_bet;
      m_totalSpent-=m_bet;
    }
  
  // Actions    
  double buy(double bet=0);
  double sell(double bet=0);
  double eval(double Dtime=0);
  void iterTime(double time=0,double step=0);
  double setBetaSigma(double betaSigma=0.5)
    
  double getVar(double start=0,double stop=0);
  
  // Get methods
  double getSpent(){return m_totalSpent; }
  double getFVal(){ return m_f_val; } 
  TRandom *getBeta(){ return m_beta; }
  double getAlpha(){return m_alpha; }
  double getIntegral(){return m_integral; } 
  double getTime(){return m_time; }
  int getIterations(){return m_integral; }
  
  
  



  ~stock(){ 
    // destructor 
    delete m_beta;
  } 
  
 private:
  double m_f_val;
  double m_alpha;
  TRandom  *m_beta;
  double m_betaSigma;
  double m_bet;
  double m_integral;
  int  m_iter;
  double m_time;
  double m_int_time;
  double m_totalSpent;


};

typedef std::vector<stock*> stockContainer;
#endif
